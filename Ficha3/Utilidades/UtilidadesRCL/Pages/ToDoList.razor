@page "/todolist"
@using UtilidadesRCL.Data.Interfaces
@using UtilidadesRCL.Data.Services
@using UtilidadesRCL.Data.Dtos
@inject ITodoService TodoService

<PageTitle>To-Do List</PageTitle>

<h1>To-Do List</h1>

<p>This is a placeholder for the To-Do List component.</p>

<div class="todo-container">
    <div class="input-section">
        <input type="text" @bind="newTaskText" @onkeypress="HandleKeyPress"
               placeholder="Digite uma nova tarefa..." class="form-control" />
        <button @onclick="AddTask" class="btn btn-primary mt-2" disabled="@string.IsNullOrWhiteSpace(newTaskText)">
            Adicionar Tarefa
        </button>
    </div>

    <div class="tasks-section mt-4">
        @if (tasks.Any())
        {
            <h3>Suas Tarefas:</h3>
            <ul class="list-group">
                @foreach (var task in tasks)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <input type="checkbox" @bind="task.IsCompleted" @bind:after="() => ToggleTask(task)" class="form-check-input me-2" />
                            <span class="@(task.IsCompleted ? "text-decoration-line-through text-muted" : "")">
                                @task.Title
                            </span>
                        </div>
                        <button @onclick="() => RemoveTask(task)" class="btn btn-danger btn-sm">
                            Remover
                        </button>
                    </li>
                }
            </ul>

            <div class="mt-3">
                <small class="text-muted">
                    Total: @tasks.Count() | Completas: @tasks.Count(t => t.IsCompleted) | Pendentes: @tasks.Count(t => !t.IsCompleted)
                </small>
            </div>
        }
        else
        {
            <p class="text-muted">Nenhuma tarefa adicionada ainda.</p>
        }
    </div>
</div>

@code {
    private IEnumerable<TodoItemDto> tasks = Enumerable.Empty<TodoItemDto>();
    private string newTaskText = "";

    protected override async Task OnInitializedAsync()
    {
        tasks = await TodoService.GetTodoItemsAsync();
    }

    private async Task AddTask()
    {
        if (!string.IsNullOrWhiteSpace(newTaskText))
        {
            await TodoService.AddTodoItemAsync(newTaskText.Trim());
            tasks = await TodoService.GetTodoItemsAsync();
            newTaskText = "";
        }
    }

    private async Task RemoveTask(TodoItemDto task)
    {
        await TodoService.DeleteTodoItemAsync(task.Id);
        tasks = await TodoService.GetTodoItemsAsync();
    }

    private async Task ToggleTask(TodoItemDto task)
    {
        // Atualiza o estado local imediatamente para feedback visual instantâneo
        task.IsCompleted = !task.IsCompleted;
        StateHasChanged();
        
        try
        {
            await TodoService.ToggleTodoItemAsync(task.Id);
            // Recarrega a lista para garantir sincronização com o backend
            tasks = await TodoService.GetTodoItemsAsync();
        }
        catch
        {
            // Se houver erro, reverte o estado local
            task.IsCompleted = !task.IsCompleted;
            StateHasChanged();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddTask();
        }
    }
}
